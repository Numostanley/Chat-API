"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os

from pathlib import Path

from dotenv import dotenv_values, load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')

# if ENVIRONMENT is set to 'prod' in the .env.base file load the
# production environment variable ('.env/prod/.env') else
# load the development environment variables ('.env/dev/.env')

PROD_ENV_VALUE: str = 'prod'

DEV_ENV_VALUE: str = 'dev'

LOCAL_ENV_VALUE: str = 'local'

if ENVIRONMENT == PROD_ENV_VALUE:
    ENV_FILE_PATH = BASE_DIR / '.env/prod/.env'
elif ENVIRONMENT == DEV_ENV_VALUE:
    ENV_FILE_PATH = BASE_DIR / '.env/dev/.env'
else:
    ENV_FILE_PATH = BASE_DIR / '.env/local/.env'

# load environment variables for the specified
# environment (either `.env/prod/.env` or `.env/dev/.env`)
env_config = dotenv_values(
    dotenv_path=ENV_FILE_PATH
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = env_config['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_config['DEBUG']

API_PREFIX: str = env_config['API_PREFIX']  # Api prefix for versioning

API_VERSIONS = env_config['API_VERSIONS']

ALLOWED_HOSTS: list[str] = env_config['ALLOWED_HOSTS'].split(',')

# Application definition

INSTALLED_APPS: list[str] = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "daphne",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_extensions",
    "corsheaders",
    "channels",
    "drf_spectacular",


    # custom apps
    "apis.authentication",
    "apis.base",
    "apis.clients",
    "apis.users",
    "apis.chat"
]

SITE_ID = 1

MIDDLEWARE: list[str] = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apis.authentication.middleware.TokenAuthMiddleware'
]

ROOT_URLCONF: str = "core.routers.urls"

TEMPLATES: list[dict] = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION: str = "core.sgi.wsgi.application"

ASGI_APPLICATION: str = "core.sgi.asgi.application"

CHANNEL_LAYERS: dict = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: list[dict] = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE: str = "en-us"

TIME_ZONE: str = "UTC"

USE_I18N: bool = True

USE_TZ: bool = True

AUTH_USER_MODEL: str = 'users.User'

DEFAULT_AUTO_FIELD: str = "django.db.models.BigAutoField"


# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS: list = env_config['ALLOWED_ORIGINS'].split(',')


# ======== OAUTH 2.0 Settings =========#

TOKEN_EXPIRY_TIME = int(env_config['TOKEN_EXPIRY_TIME'])

PRIVATE_KEY = Path(f'{BASE_DIR}/signing_key/chatapi.key').read_text()

PUBLIC_KEY = Path(f'{BASE_DIR}/signing_key/chatapi.key.pub').read_text()

SIGNING_ALGORITHM = env_config['SIGNING_ALGORITHM']

ISSUER = env_config['ISSUER']

AUDIENCE = env_config['ISSUER']  # same as the ISSUER because the Authorization server is still the Resource Server


# ======== DRF Rest Framework Settings =========#

REST_FRAMEWORK: dict = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'apis.base.exceptions.custom_exception_handler',
    'NON_FIELD_ERRORS_KEY': '',
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'apis.base.throttler.Throttler'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'all_endpoints': '50/minute'  # define the scope in the base APIView in apis.base.views
    # }
}

OTP_EXPIRY_TIME: int = int(env_config['OTP_EXPIRY_TIME'])

REFRESH_TOKEN_EXPIRY_TIME: int = int(env_config['REFRESH_TOKEN_EXPIRY_TIME'])

PASSWORD_RESET_TIMEOUT: int = 480  # in seconds
